// <auto-generated />
using System;
using FicticiaAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FicticiaAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220408154646_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FicticiaAPI.Models.Client", b =>
                {
                    b.Property<int>("cli_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cli_Id"), 1L, 1);

                    b.Property<int?>("GenderTypeId")
                        .HasColumnType("int");

                    b.Property<int>("cliDoc_DocumentType")
                        .HasColumnType("int");

                    b.Property<int>("cliGenGender")
                        .HasColumnType("int");

                    b.Property<bool>("cli_Active")
                        .HasColumnType("bit");

                    b.Property<bool>("cli_Diabetic")
                        .HasColumnType("bit");

                    b.Property<string>("cli_Diseases")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("cli_Drive")
                        .HasColumnType("bit");

                    b.Property<string>("cli_Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("cli_OtherDiseases")
                        .HasColumnType("bit");

                    b.Property<bool>("cli_UseGlasses")
                        .HasColumnType("bit");

                    b.Property<int>("dni")
                        .HasColumnType("int");

                    b.Property<int?>("documentTypeid")
                        .HasColumnType("int");

                    b.HasKey("cli_Id");

                    b.HasIndex("GenderTypeId");

                    b.HasIndex("documentTypeid");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("FicticiaAPI.Models.DocumentType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("documentType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("DocumentType");
                });

            modelBuilder.Entity("FicticiaAPI.Models.GenderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("GenderType");
                });

            modelBuilder.Entity("FicticiaAPI.Models.Client", b =>
                {
                    b.HasOne("FicticiaAPI.Models.GenderType", "GenderType")
                        .WithMany()
                        .HasForeignKey("GenderTypeId");

                    b.HasOne("FicticiaAPI.Models.DocumentType", "documentType")
                        .WithMany()
                        .HasForeignKey("documentTypeid");

                    b.Navigation("GenderType");

                    b.Navigation("documentType");
                });
#pragma warning restore 612, 618
        }
    }
}
